// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @unique @default(uuid())
  email            String         @unique
  password         String
  username         String
  emailConfirmed   Boolean        @default(false)
  confirmationCode String         @unique
  isDarkMode       Boolean        @default(false)
  refreshTokens    RefreshToken[]
  lastLoginDate    DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  goals            Goal[]
  Task             Task[]
  Cycle            Cycle[]
  passwordResetToken       String?    // Optional field for the reset token
  passwordResetTokenExpiry DateTime?  // Optional field for token expiry
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Goal {
  id          String   @id @unique @default(uuid())
  goalName    String
  deadline    DateTime
  weeklyHours Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isFinished  Boolean  @default(false)
}

model Task {
  id          String   @id @unique @default(uuid())
  taskName    String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cycles      Cycle[]
  isCompleted Boolean
  userId      String
  goalId      String
}

model Cycle {
  id            String    @id @unique @default(uuid())
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  minutesAmount Int
  finishAt      DateTime
  interruptedAt DateTime?
  taskId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
}
model Cancelation {
  id              String             @id @unique @default(uuid())
  userEmail       String
  accountCreatedAt DateTime          @default(now())
  cancelationDate DateTime           @default(now())
  reasons         CancelationReason[] @relation("CancelationReasons")
  comment         String?
}

model CancelationReason {
  id          String             @id @unique @default(uuid())
  reason      String             @unique
  cancelations Cancelation[]     @relation("CancelationReasons")
}